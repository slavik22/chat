// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    chat_room_id,
    user_id,
    content
) VALUES ($1, $2, $3)
RETURNING id, chat_room_id, user_id, content, createdat
`

type CreateMessageParams struct {
	ChatRoomID int64  `json:"chat_room_id"`
	UserID     int64  `json:"user_id"`
	Content    string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ChatRoomID, arg.UserID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.UserID,
		&i.Content,
		&i.Createdat,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id=$1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT messages.id,chat_room_id,user_id,content,createdAt,users.name FROM messages
INNER JOIN users On messages.user_id = users.id
WHERE chat_room_id = $1
`

type GetChatMessagesRow struct {
	ID         int64        `json:"id"`
	ChatRoomID int64        `json:"chat_room_id"`
	UserID     int64        `json:"user_id"`
	Content    string       `json:"content"`
	Createdat  sql.NullTime `json:"createdat"`
	Name       string       `json:"name"`
}

func (q *Queries) GetChatMessages(ctx context.Context, chatRoomID int64) ([]GetChatMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatMessages, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatMessagesRow{}
	for rows.Next() {
		var i GetChatMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.ChatRoomID,
			&i.UserID,
			&i.Content,
			&i.Createdat,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET content = $2
WHERE id = $1
 RETURNING id, chat_room_id, user_id, content, createdat
`

type UpdateMessageParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.ID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.UserID,
		&i.Content,
		&i.Createdat,
	)
	return i, err
}
