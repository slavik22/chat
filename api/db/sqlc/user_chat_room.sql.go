// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_chat_room.sql

package db

import (
	"context"
)

const addUserToChat = `-- name: AddUserToChat :exec
INSERT INTO user_chat_rooms (
    chat_room_id,
    user_id
) VALUES ($1, $2)
`

type AddUserToChatParams struct {
	ChatRoomID int64 `json:"chat_room_id"`
	UserID     int64 `json:"user_id"`
}

func (q *Queries) AddUserToChat(ctx context.Context, arg AddUserToChatParams) error {
	_, err := q.db.ExecContext(ctx, addUserToChat, arg.ChatRoomID, arg.UserID)
	return err
}

const deleteUserFromChat = `-- name: DeleteUserFromChat :exec
DELETE FROM user_chat_rooms
WHERE chat_room_id=$1 AND user_id=$2
`

type DeleteUserFromChatParams struct {
	ChatRoomID int64 `json:"chat_room_id"`
	UserID     int64 `json:"user_id"`
}

func (q *Queries) DeleteUserFromChat(ctx context.Context, arg DeleteUserFromChatParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFromChat, arg.ChatRoomID, arg.UserID)
	return err
}

const getChatUsers = `-- name: GetChatUsers :many
SELECT users.id,users.name, users.login FROM user_chat_rooms
INNER JOIN users ON user_chat_rooms.user_id = users.id
WHERE chat_room_id = $1
`

type GetChatUsersRow struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Login string `json:"login"`
}

func (q *Queries) GetChatUsers(ctx context.Context, chatRoomID int64) ([]GetChatUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatUsers, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatUsersRow{}
	for rows.Next() {
		var i GetChatUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Login); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
