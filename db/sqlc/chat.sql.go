// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: chat.sql

package db

import (
	"context"
)

const createChatRoom = `-- name: CreateChatRoom :one
INSERT INTO chats (
    user1_id,
    user2_id
) VALUES ($1,$2)
RETURNING id, user1_id, user2_id
`

type CreateChatRoomParams struct {
	User1ID int64 `json:"user1_id"`
	User2ID int64 `json:"user2_id"`
}

func (q *Queries) CreateChatRoom(ctx context.Context, arg CreateChatRoomParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChatRoom, arg.User1ID, arg.User2ID)
	var i Chat
	err := row.Scan(&i.ID, &i.User1ID, &i.User2ID)
	return i, err
}

const deleteChatRoom = `-- name: DeleteChatRoom :exec
DELETE FROM chats
WHERE id=$1
`

func (q *Queries) DeleteChatRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChatRoom, id)
	return err
}

const getChat = `-- name: GetChat :one
SELECT id, user1_id, user2_id FROM chats
WHERE id = $1
`

func (q *Queries) GetChat(ctx context.Context, id int64) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, id)
	var i Chat
	err := row.Scan(&i.ID, &i.User1ID, &i.User2ID)
	return i, err
}

const getUserChats = `-- name: GetUserChats :many
SELECT c.id, user1.id as user1Id, user2.id as user2Id, user1.name as name1, user2.name as name2
FROM chats c
JOIN users user1 ON c.user1_id = user1.id
JOIN users user2 ON c.user2_id = user2.id
WHERE c.user1_id = $1 OR c.user2_id = $1
`

type GetUserChatsRow struct {
	ID      int64  `json:"id"`
	User1id int64  `json:"user1id"`
	User2id int64  `json:"user2id"`
	Name1   string `json:"name1"`
	Name2   string `json:"name2"`
}

func (q *Queries) GetUserChats(ctx context.Context, user1ID int64) ([]GetUserChatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserChats, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserChatsRow{}
	for rows.Next() {
		var i GetUserChatsRow
		if err := rows.Scan(
			&i.ID,
			&i.User1id,
			&i.User2id,
			&i.Name1,
			&i.Name2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
